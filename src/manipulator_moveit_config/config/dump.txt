#include <rclcpp/rclcpp.hpp>
#include <moveit/planning_scene/planning_scene.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit/task_constructor/task.h>
#include <moveit/task_constructor/solvers.h>
#include <moveit/task_constructor/stages.h>
#if __has_include(<tf2_geometry_msgs/tf2_geometry_msgs.hpp>)
#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>
#else
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#endif
#if __has_include(<tf2_eigen/tf2_eigen.hpp>)
#include <tf2_eigen/tf2_eigen.hpp>
#else
#include <tf2_eigen/tf2_eigen.h>
#endif

static const rclcpp::Logger LOGGER = rclcpp::get_logger("manipulator");
namespace mtc = moveit::task_constructor;

class MTCTaskNode
{
public:
  MTCTaskNode(const rclcpp::NodeOptions& options);
  rclcpp::node_interfaces::NodeBaseInterface::SharedPtr getNodeBaseInterface();
  void doTask();
  void setupPlanningScene();
private:
  mtc::Task createTask();
  mtc::Task task_;
  rclcpp::Node::SharedPtr node_;
};

rclcpp::node_interfaces::NodeBaseInterface::SharedPtr MTCTaskNode::getNodeBaseInterface()

{
  return node_->get_node_base_interface();
}

MTCTaskNode::MTCTaskNode(const rclcpp::NodeOptions& options)
  : node_{ std::make_shared<rclcpp::Node>("moveit2_demo", options) }
{
}

void MTCTaskNode::setupPlanningScene()

  {
    moveit::planning_interface::PlanningSceneInterface psi;

    // List of collision objects
    std::vector<moveit_msgs::msg::CollisionObject> collision_objects;

    // Define first box
    moveit_msgs::msg::CollisionObject red_box;
    red_box.id = "red_box";
    red_box.header.frame_id = "world";
    red_box.primitives.resize(1);
    red_box.primitives[0].type = shape_msgs::msg::SolidPrimitive::BOX;
    red_box.primitives[0].dimensions = {0.025, 0.025, 0.1};
  
    geometry_msgs::msg::Pose red_pose;
    red_pose.position.x = 0.0;
    red_pose.position.y = 0.6;
    red_pose.position.z = 0.05; // Half of height to sit on the ground
    red_pose.orientation.w = 1.0;
    red_box.pose = red_pose;

    collision_objects.push_back(red_box);

    // Define second box
    moveit_msgs::msg::CollisionObject blue_box;
    blue_box.id = "blue_box";
    blue_box.header.frame_id = "world";
    blue_box.primitives.resize(1);
    blue_box.primitives[0].type = shape_msgs::msg::SolidPrimitive::BOX;
    blue_box.primitives[0].dimensions = {0.025, 0.025, 0.1};

    geometry_msgs::msg::Pose blue_pose;
    blue_pose.position.x = 0.4;
    blue_pose.position.y = 0.4;
    blue_pose.position.z = 0.05;
    blue_pose.orientation.w = 1.0;
    blue_box.pose = blue_pose;

    collision_objects.push_back(blue_box);

    // Define third box
    moveit_msgs::msg::CollisionObject green_box;
    green_box.id = "green_box";
    green_box.header.frame_id = "world";
    green_box.primitives.resize(1);
    green_box.primitives[0].type = shape_msgs::msg::SolidPrimitive::BOX;
    green_box.primitives[0].dimensions = {0.025, 0.025, 0.1};

    geometry_msgs::msg::Pose green_pose;
    green_pose.position.x = 0.8;
    green_pose.position.y = 0.2;
    green_pose.position.z = 0.05;
    green_pose.orientation.w = 1.0;
    green_box.pose = green_pose;

    collision_objects.push_back(green_box);

    // Apply all objects to the planning scene
    psi.applyCollisionObjects(collision_objects);

  }
// {
//   moveit_msgs::msg::CollisionObject object;
//   object.id = "object";
//   object.header.frame_id = "world";
//   object.primitives.resize(1);
//   object.primitives[0].type = shape_msgs::msg::SolidPrimitive::BOX;
//   object.primitives[0].dimensions = { 0.025, 0.025, 0.1 };
//   // object.primitives[0].type = shape_msgs::msg::SolidPrimitive::CYLINDER;
//   // object.primitives[0].dimensions = { 0.02, 0.05};
//   geometry_msgs::msg::Pose pose;
//   pose.position.x = 0.6;
//   pose.position.y = 0.3;
//   pose.position.z = 0.05;
//   pose.orientation.w = 1.0;
//   object.pose = pose;
//   moveit::planning_interface::PlanningSceneInterface psi;
//   psi.applyCollisionObject(object);
// }

void MTCTaskNode::doTask()
{
  task_ = createTask();
  try
  {
    task_.init();
  }
  catch (mtc::InitStageException& e)
  {
    RCLCPP_ERROR_STREAM(LOGGER, e);
    return;
  }
  if (!task_.plan(5))
  {
    RCLCPP_ERROR_STREAM(LOGGER, "Task planning failed");
    return;
  }
  task_.introspection().publishSolution(*task_.solutions().front());
  auto result = task_.execute(*task_.solutions().front());
  if (result.val != moveit_msgs::msg::MoveItErrorCodes::SUCCESS)
  {
    RCLCPP_ERROR_STREAM(LOGGER, "Task execution failed");
    return;
  }
  return;
}

mtc::Task MTCTaskNode::createTask()
{
  mtc::Task task;
  task.stages()->setName("Pick and Place task");
  task.loadRobotModel(node_);
  const auto& arm_group_name = "manipulator_arm";
  const auto& hand_group_name = "hand";
  const auto& hand_frame = "manipulator_hand";
  task.setProperty("group", arm_group_name);
  task.setProperty("eef", hand_group_name);
  task.setProperty("ik_frame", hand_frame);
  mtc::Stage* current_state_ptr = nullptr; 
  auto stage_state_current = std::make_unique<mtc::stages::CurrentState>("current");
  current_state_ptr = stage_state_current.get();
  task.add(std::move(stage_state_current));
  auto sampling_planner = std::make_shared<mtc::solvers::PipelinePlanner>(node_);
  auto interpolation_planner = std::make_shared<mtc::solvers::JointInterpolationPlanner>();
  auto cartesian_planner = std::make_shared<mtc::solvers::CartesianPath>();
  cartesian_planner->setMaxVelocityScalingFactor(0.8);
  cartesian_planner->setMaxAccelerationScalingFactor(0.8);
  cartesian_planner->setStepSize(0.001);
  auto stage_open_hand = std::make_unique<mtc::stages::MoveTo>("open hand", interpolation_planner);
  stage_open_hand->setGroup(hand_group_name);
  stage_open_hand->setGoal("open");
  task.add(std::move(stage_open_hand));

  auto stage_move_to_pick = std::make_unique<mtc::stages::Connect>("move to pick", mtc::stages::Connect::GroupPlannerVector{ { arm_group_name, sampling_planner } });
  stage_move_to_pick->setTimeout(10.0);
  stage_move_to_pick->properties().configureInitFrom(mtc::Stage::PARENT);
  task.add(std::move(stage_move_to_pick));

  mtc::Stage* attach_object_stage = nullptr; 

  {
    auto grasp = std::make_unique<mtc::SerialContainer>("pick object");
    task.properties().exposeTo(grasp->properties(), { "eef", "group", "ik_frame" });
    grasp->properties().configureInitFrom(mtc::Stage::PARENT, { "eef", "group", "ik_frame" });
    
    {
      auto stage = std::make_unique<mtc::stages::MoveRelative>("approach object", cartesian_planner);
      stage->properties().set("marker_ns", "approach_object");
      stage->properties().set("link", hand_frame);
      stage->properties().configureInitFrom(mtc::Stage::PARENT, { "group" });
      stage->setMinMaxDistance(0.1, 0.15);

      geometry_msgs::msg::Vector3Stamped vec;
      vec.header.frame_id = hand_frame;
      vec.vector.z = 1.0;
      stage->setDirection(vec);
      grasp->insert(std::move(stage));
    }

 
    {
      auto stage = std::make_unique<mtc::stages::GenerateGraspPose>("generate grasp pose");
      stage->properties().configureInitFrom(mtc::Stage::PARENT);
      stage->properties().set("marker_ns", "grasp_pose");
      stage->setPreGraspPose("open");
      stage->setObject("object");
      stage->setAngleDelta(M_PI / 24);
      stage->setMonitoredStage(current_state_ptr); 

      Eigen::Isometry3d grasp_frame_transform;
      Eigen::Quaterniond q = Eigen::AngleAxisd(M_PI / 2, Eigen::Vector3d::UnitX()) * Eigen::AngleAxisd(M_PI / 2, Eigen::Vector3d::UnitY()) * Eigen::AngleAxisd(M_PI / 2, Eigen::Vector3d::UnitZ());
      grasp_frame_transform.linear() = q.matrix();
      grasp_frame_transform.translation().z() = 0.1;

      auto wrapper = std::make_unique<mtc::stages::ComputeIK>("grasp pose IK", std::move(stage));
      wrapper->setMaxIKSolutions(8);
      wrapper->setMinSolutionDistance(1.0);
      wrapper->setIKFrame(grasp_frame_transform,hand_frame);
      wrapper->properties().configureInitFrom(mtc::Stage::PARENT, { "eef", "group" });
      wrapper->properties().configureInitFrom(mtc::Stage::INTERFACE, { "target_pose" });
      grasp->insert(std::move(wrapper));
    }

    {
      auto stage =
          std::make_unique<mtc::stages::ModifyPlanningScene>("allow collision (hand,object)");
      stage->allowCollisions("object",
                            task.getRobotModel()
                                ->getJointModelGroup(hand_group_name)
                                ->getLinkModelNamesWithCollisionGeometry(),
                            true);
      grasp->insert(std::move(stage));
    }

    {
      auto stage = std::make_unique<mtc::stages::MoveTo>("close hand", interpolation_planner);
      stage->setGroup(hand_group_name);
      stage->setGoal("close");
      grasp->insert(std::move(stage));
    }

    {
      auto stage = std::make_unique<mtc::stages::ModifyPlanningScene>("attach object");
      stage->attachObject("object", hand_frame);
      attach_object_stage = stage.get();
      grasp->insert(std::move(stage));

    }


    {
      auto stage = std::make_unique<mtc::stages::MoveRelative>("lift object", cartesian_planner);
      stage->properties().configureInitFrom(mtc::Stage::PARENT, { "group" });
      stage->setMinMaxDistance(0.1, 0.3);
      stage->setIKFrame(hand_frame);
      stage->properties().set("marker_ns", "lift_object");

      geometry_msgs::msg::Vector3Stamped vec;
      vec.header.frame_id = "world";
      vec.vector.z = 1.0;
      stage->setDirection(vec);
      grasp->insert(std::move(stage));
    }

    task.add(std::move(grasp));
  }

  {
    auto stage_move_to_place = std::make_unique<mtc::stages::Connect>("move to place", mtc::stages::Connect::GroupPlannerVector{ { arm_group_name, sampling_planner }, { hand_group_name, sampling_planner } });
    stage_move_to_place->setTimeout(10.0);
    stage_move_to_place->properties().configureInitFrom(mtc::Stage::PARENT);
    task.add(std::move(stage_move_to_place));
  }

  {
    auto place = std::make_unique<mtc::SerialContainer>("place object");
    task.properties().exposeTo(place->properties(), { "eef", "group", "ik_frame" });
    place->properties().configureInitFrom(mtc::Stage::PARENT, { "eef", "group", "ik_frame" });

    {
      auto stage = std::make_unique<mtc::stages::GeneratePlacePose>("generate place pose");
      stage->properties().configureInitFrom(mtc::Stage::PARENT);
      stage->properties().set("marker_ns", "place_pose");
      stage->setObject("object");

      geometry_msgs::msg::PoseStamped target_pose_msg;
      target_pose_msg.header.frame_id = "object";
      target_pose_msg.pose.position.x = -0.6;
      target_pose_msg.pose.position.y = 0.3;
      target_pose_msg.pose.position.z = 0.0;
      target_pose_msg.pose.orientation.w = 1.0;
      stage->setPose(target_pose_msg);
      stage->setMonitoredStage(attach_object_stage);  

      auto wrapper = std::make_unique<mtc::stages::ComputeIK>("place pose IK", std::move(stage));
      wrapper->setMaxIKSolutions(8);
      wrapper->setMinSolutionDistance(1.0);
      wrapper->setIKFrame("object");
      wrapper->properties().configureInitFrom(mtc::Stage::PARENT, { "eef", "group" });
      wrapper->properties().configureInitFrom(mtc::Stage::INTERFACE, { "target_pose" });
      place->insert(std::move(wrapper));
    }

    {
      auto stage = std::make_unique<mtc::stages::MoveTo>("open hand", interpolation_planner);
      stage->setGroup(hand_group_name);
      stage->setGoal("open");
      place->insert(std::move(stage));
    }

    // {
    //   auto stage =
    //       std::make_unique<mtc::stages::ModifyPlanningScene>("forbid collision (hand,object)");
    //   stage->allowCollisions("object",
    //                         task.getRobotModel()
    //                             ->getJointModelGroup(hand_group_name)
    //                             ->getLinkModelNamesWithCollisionGeometry(),
    //                         false);
    //   place->insert(std::move(stage));
    // }

    {
      auto stage = std::make_unique<mtc::stages::ModifyPlanningScene>("detach object");
      stage->detachObject("object", hand_frame);
      place->insert(std::move(stage));
    }

    {
      auto stage = std::make_unique<mtc::stages::MoveRelative>("retreat", cartesian_planner);
      stage->properties().configureInitFrom(mtc::Stage::PARENT, { "group" });
      stage->setMinMaxDistance(0.1, 0.3);
      stage->setIKFrame(hand_frame);
      stage->properties().set("marker_ns", "retreat");

      geometry_msgs::msg::Vector3Stamped vec;
      vec.header.frame_id = "world";
      vec.vector.x = -0.5;
      stage->setDirection(vec);
      place->insert(std::move(stage));
    }

    task.add(std::move(place));
  }

  {
    auto stage = std::make_unique<mtc::stages::MoveTo>("return home", interpolation_planner);
    stage->properties().configureInitFrom(mtc::Stage::PARENT, { "group" });
    stage->setGoal("ready");
    task.add(std::move(stage));
  }

  return task;
}

int main(int argc, char** argv)

{
  rclcpp::init(argc, argv);
  rclcpp::NodeOptions options;
  options.automatically_declare_parameters_from_overrides(true);
  auto mtc_task_node = std::make_shared<MTCTaskNode>(options);
  rclcpp::executors::MultiThreadedExecutor executor;

  auto spin_thread = std::make_unique<std::thread>([&executor, &mtc_task_node]() {
    executor.add_node(mtc_task_node->getNodeBaseInterface());
    executor.spin();
    executor.remove_node(mtc_task_node->getNodeBaseInterface());
  });

  mtc_task_node->setupPlanningScene();
  // mtc_task_node->doTask();

  spin_thread->join();
  rclcpp::shutdown();
  return 0;
}

#include <rclcpp/rclcpp.hpp>
#include <moveit/task_constructor/task.h>
#include <moveit/task_constructor/solvers.h>
#include <moveit/task_constructor/stages.h>
#if __has_include(<tf2_geometry_msgs/tf2_geometry_msgs.hpp>)
#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>
#else
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#endif
#if __has_include(<tf2_eigen/tf2_eigen.hpp>)
#include <tf2_eigen/tf2_eigen.hpp>
#else
#include <tf2_eigen/tf2_eigen.hpp>
#endif

static const rclcpp::Logger LOGGER = rclcpp::get_logger("manipulator");
namespace mtc = moveit::task_constructor;

class MTCTaskNode
{
public:
    explicit MTCTaskNode(const std::string& object_id)
        : node_{ std::make_shared<rclcpp::Node>("moveit2_demo") }, object_id_(object_id)
    {
        RCLCPP_INFO(LOGGER, "Initializing MoveIt Task Constructor (MTC) for object: %s", object_id_.c_str());
    }

    void executeTask()
    {
        task_ = createTask();
        try
        {
            task_.init();
        }
        catch (mtc::InitStageException& e)
        {
            RCLCPP_ERROR_STREAM(LOGGER, e);
            return;
        }
        if (!task_.plan(5))
        {
            RCLCPP_ERROR_STREAM(LOGGER, "Task planning failed!");
            return;
        }
        task_.introspection().publishSolution(*task_.solutions().front());
        auto result = task_.execute(*task_.solutions().front());
        if (result.val != moveit_msgs::msg::MoveItErrorCodes::SUCCESS)
        {
            RCLCPP_ERROR_STREAM(LOGGER, "Task execution failed!");
            return;
        }
    }

private:
    mtc::Task createTask()
    {
        mtc::Task task;
        task.stages()->setName("Pick and Place Task");
        task.loadRobotModel(node_);

        const auto& arm_group_name = "manipulator_arm";
        const auto& hand_group_name = "hand";
        const auto& hand_frame = "manipulator_hand";
        task.setProperty("group", arm_group_name);
        task.setProperty("eef", hand_group_name);
        task.setProperty("ik_frame", hand_frame);

        mtc::Stage* current_state_ptr = nullptr;
        auto stage_current = std::make_unique<mtc::stages::CurrentState>("current");
        current_state_ptr = stage_current.get();
        task.add(std::move(stage_current));

        auto sampling_planner = std::make_shared<mtc::solvers::PipelinePlanner>(node_);
        auto interpolation_planner = std::make_shared<mtc::solvers::JointInterpolationPlanner>();
        auto cartesian_planner = std::make_shared<mtc::solvers::CartesianPath>();
        cartesian_planner->setMaxVelocityScalingFactor(0.8);
        cartesian_planner->setMaxAccelerationScalingFactor(0.8);
        cartesian_planner->setStepSize(0.001);

        // Open Hand
        auto stage_open_hand = std::make_unique<mtc::stages::MoveTo>("open hand", interpolation_planner);
        stage_open_hand->setGroup(hand_group_name);
        stage_open_hand->setGoal("open");
        task.add(std::move(stage_open_hand));

        // Move to Pick Position
        auto stage_move_to_pick = std::make_unique<mtc::stages::Connect>("move to pick", mtc::stages::Connect::GroupPlannerVector{ { arm_group_name, sampling_planner } });
        stage_move_to_pick->setTimeout(10.0);
        stage_move_to_pick->properties().configureInitFrom(mtc::Stage::PARENT);
        task.add(std::move(stage_move_to_pick));

        // Pick Object
        mtc::Stage* attach_object_stage = nullptr;
        {
            auto grasp = std::make_unique<mtc::SerialContainer>("pick object");
            task.properties().exposeTo(grasp->properties(), { "eef", "group", "ik_frame" });
            grasp->properties().configureInitFrom(mtc::Stage::PARENT, { "eef", "group", "ik_frame" });

            // Approach Object
            {
                auto stage = std::make_unique<mtc::stages::MoveRelative>("approach object", cartesian_planner);
                stage->properties().set("marker_ns", "approach_object");
                stage->properties().set("link", hand_frame);
                stage->properties().configureInitFrom(mtc::Stage::PARENT, { "group" });
                stage->setMinMaxDistance(0.1, 0.15);

                geometry_msgs::msg::Vector3Stamped vec;
                vec.header.frame_id = hand_frame;
                vec.vector.z = 1.0;
                stage->setDirection(vec);
                grasp->insert(std::move(stage));
            }

            // Close Hand
            {
                auto stage = std::make_unique<mtc::stages::MoveTo>("close hand", interpolation_planner);
                stage->setGroup(hand_group_name);
                stage->setGoal("close");
                grasp->insert(std::move(stage));
            }

            // Attach Object
            {
                auto stage = std::make_unique<mtc::stages::ModifyPlanningScene>("attach object");
                stage->attachObject(object_id_, hand_frame);
                attach_object_stage = stage.get();
                grasp->insert(std::move(stage));
            }

            task.add(std::move(grasp));
        }

        // **Fix: Add Intermediate Transition After Pick**
        auto stage_lift_object = std::make_unique<mtc::stages::MoveRelative>("lift object", cartesian_planner);
        stage_lift_object->properties().configureInitFrom(mtc::Stage::PARENT, { "group" });
        stage_lift_object->setMinMaxDistance(0.1, 0.3);
        stage_lift_object->setIKFrame(hand_frame);
        stage_lift_object->properties().set("marker_ns", "lift_object");

        geometry_msgs::msg::Vector3Stamped lift_vec;
        lift_vec.header.frame_id = "world";
        lift_vec.vector.z = 1.0;
        stage_lift_object->setDirection(lift_vec);
        task.add(std::move(stage_lift_object));

        // Move to Place Position
        auto stage_move_to_place = std::make_unique<mtc::stages::Connect>("move to place", mtc::stages::Connect::GroupPlannerVector{ { arm_group_name, sampling_planner }, { hand_group_name, sampling_planner } });
        stage_move_to_place->setTimeout(10.0);
        stage_move_to_place->properties().configureInitFrom(mtc::Stage::PARENT);
        task.add(std::move(stage_move_to_place));

        return task;
    }

    mtc::Task task_;
    std::string object_id_;
    rclcpp::Node::SharedPtr node_;
};

int main(int argc, char** argv)
{
    rclcpp::init(argc, argv);
    
    std::string object_id = (argc > 1) ? argv[1] : "red_box"; // Default to "red_box"
    auto mtc_task_node = std::make_shared<MTCTaskNode>(object_id);
    mtc_task_node->executeTask();

    rclcpp::shutdown();
    return 0;
}


<?xml version="1.0" ?>
<sdf version="1.6">
    <model name="square_object">
        <static>false</static>
        <link name="square_object_link">
            <pose>0 0 0 0 0 0</pose>
            <visual name="square_object_visual">
                <geometry>
                    <box>
                        <size>0.025 0.025 0.1</size>
                    </box>
                </geometry>
                <material>
                    <ambient>1 0 0 1</ambient>
                    <diffuse>1 0 0 1</diffuse> 
                </material>
            </visual>
            <collision name="square_object_collision">
                <geometry>
                    <box>
                        <size>0.025 0.025 0.1</size>
                    </box>
                </geometry>
                <surface>
                    <friction>
                        <ode>
                            <mu>0.68</mu>  
                            <mu2>0.68</mu2>
                        </ode>
                    </friction>
                    <contact>
                        <ode>
                            <kp>100000.0</kp> 
                            <kd>1000.0</kd>  
                            <max_vel>0.05</max_vel>
                            <min_depth>0.002</min_depth>
                        </ode>
                    </contact>
                </surface>
            </collision>
            <inertial>
                <mass>0.1</mass>
                <inertia>
                    <ixx>0.001</ixx>
                    <iyy>0.001</iyy>
                    <izz>0.001</izz>
                </inertia>
            </inertial>
        </link>
    </model>  
</sdf>
